[
    {
        "kind": 2,
        "language": "shell",
        "value": "cds init demoapp --add java,tiny-sample",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "shell",
        "value": "cd demoapp",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "shell",
        "value": "%%writefile \"attachment-extension.cds\"\nusing {my.bookshop.Books} from './data-model';\nusing {sap.attachments.Attachments} from`com.sap.cds/cds-feature-attachments`;\n\nextend entity Books with {\n    attachments : Composition of many Attachments;\n}\n",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "shell",
        "value": "%%writefile \"db/pom.xml\"\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<parent>\n\t\t<artifactId>demoapp-parent</artifactId>\n\t\t<groupId>customer</groupId>\n\t\t<version>${revision}</version>\n\t</parent>\n\n\t<artifactId>db</artifactId>\n\n    <!-- CAP Attachment-->\n    <dependencies>\n        <dependency>\n            <groupId>com.sap.cds</groupId>\n            <artifactId>cds-feature-attachments</artifactId>\n            <version>attachment_version</version>\n        </dependency>\n    </dependencies>\n\t\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>com.sap.cds</groupId>\n\t\t\t\t<artifactId>cds-maven-plugin</artifactId>\n\t\t\t\t<version>${cds.services.version}</version>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>cds.clean</id>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>clean</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t</execution>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>cds.resolve</id>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>resolve</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "shell",
        "value": "cd db",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "java",
        "value": "Path versionPath = Paths.get(\"../../version.txt\");\nString version;\nif (Files.exists(versionPath)){\n    version = Files.readString(versionPath);\n    System.out.println(\"Using version from 'version.txt': \" + version);\n}else{\n    version = \"1.0.0\";\n    System.out.println(\"Using hard coded version: \" + version);\n}\nPath pomPath = Paths.get(\"pom.xml\");\nStream<String> lines = Files.lines(pomPath);\nList<String> replaced = lines.map(line -> line.replaceAll(\"attachment_version\", version)).collect(Collectors.toList());\nFiles.write(pomPath, replaced);\nlines.close();",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "shell",
        "value": "mvn clean compile",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "shell",
        "value": "cd ..",
        "outputs": []
    },
    {
        "kind": 1,
        "language": "markdown",
        "value": "## Enhance Service\n\nRemove the `@readonly` from the service and add the annotation for the draft enablement.",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "java",
        "value": "Path path = Paths.get(\"srv/cat-service.cds\");\nStream<String> lines = Files.lines(path);\nList<String> replaced = lines.map(line -> line.replaceAll(\"@readonly\", \"\")).collect(Collectors.toList());\nFiles.write(path, replaced);\nlines.close();",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "shell",
        "value": "%%writefile \"srv/cat-service-annotation.cds\"\nusing { CatalogService } from './cat-service';\n\nannotate CatalogService with @odata.draft.enabled;\n",
        "outputs": []
    },
    {
        "kind": 1,
        "language": "markdown",
        "value": "## Add UI \n\nAdd app module to the app to test the attachments in the Books entity.",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "shell",
        "value": "%%writefile \"srv/src/main/resources/application.properties\"\nspring.web.resources.static-locations=file:../app\nspring.jmx.enabled=true",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "shell",
        "value": "%%writefile \"app/fiori.html\"\n<!DOCTYPE html>\n<html>\n<head>\n\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Bookshop</title>\n\n    <script>\n        window[\"sap-ushell-config\"] = {\n            defaultRenderer: \"fiori2\",\n            applications: {}\n        };\n    </script>\n\n    <script id=\"sap-ushell-bootstrap\" src=\"https://sapui5.hana.ondemand.com/test-resources/sap/ushell/bootstrap/sandbox.js\"></script>\n    <script id=\"sap-ui-bootstrap\" src=\"https://sapui5.hana.ondemand.com/resources/sap-ui-core.js\"\n            data-sap-ui-libs=\"sap.m, sap.ushell, sap.collaboration, sap.ui.layout\"\n            data-sap-ui-compatVersion=\"edge\"\n            data-sap-ui-async=\"true\"\n            data-sap-ui-preload=\"async\"\n            data-sap-ui-theme=\"sap_horizon\"\n            data-sap-ui-frameOptions=\"allow\"\n    ></script>\n    <script>\n        sap.ui.getCore().attachInit(()=> sap.ushell.Container.createRenderer().placeAt(\"content\"))\n    </script>\n\n</head>\n<body class=\"sapUiBody\" id=\"content\"></body>\n</html>\n",
        "outputs": []
    }
]