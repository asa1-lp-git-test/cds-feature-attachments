[
    {
        "kind": 2,
        "language": "shell",
        "value": "cds init demoapp --add java\n",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "shell",
        "value": "cd demoapp",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "shell",
        "value": "mvn com.sap.cds:cds-maven-plugin:2.9.0:add -Dfeature=SAMPLE",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "shell",
        "value": "%%writefile \"db/attachment-extension.cds\"\nusing {sap.capire.bookshop.Books} from './schema';\nusing {sap.attachments.Attachments} from`com.sap.cds/cds-feature-attachments`;\n\nextend entity Books with {\n    attachments : Composition of many Attachments;\n}\n",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "shell",
        "value": "%%writefile \"db/pom.xml\"\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<parent>\n\t\t<artifactId>demoapp-parent</artifactId>\n\t\t<groupId>customer</groupId>\n\t\t<version>${revision}</version>\n\t</parent>\n\n\t<artifactId>db</artifactId>\n\n    <!-- CAP Attachment-->\n    <dependencies>\n        <dependency>\n            <groupId>com.sap.cds</groupId>\n            <artifactId>cds-feature-attachments</artifactId>\n            <version>attachment_version</version>\n        </dependency>\n    </dependencies>\n\t\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>com.sap.cds</groupId>\n\t\t\t\t<artifactId>cds-maven-plugin</artifactId>\n\t\t\t\t<version>${cds.services.version}</version>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>cds.clean</id>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>clean</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t</execution>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>cds.resolve</id>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>resolve</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "shell",
        "value": "cd db",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "java",
        "value": "Path versionPath = Paths.get(\"../../version.txt\");\nString version;\nif (Files.exists(versionPath)){\n    version = Files.readString(versionPath);\n    System.out.println(\"Using version from 'version.txt': \" + version);\n}else{\n    version = \"1.0.0\";\n    System.out.println(\"Using hard coded version: \" + version);\n}\nPath pomPath = Paths.get(\"pom.xml\");\nStream<String> lines = Files.lines(pomPath);\nList<String> replaced = lines.map(line -> line.replaceAll(\"attachment_version\", version)).collect(Collectors.toList());\nFiles.write(pomPath, replaced);\nlines.close();",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "shell",
        "value": "mvn clean compile",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "shell",
        "value": "cd ../srv",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "java",
        "value": "\nPath versionPath = Paths.get(\"../../version.txt\");\nString version;\nif (Files.exists(versionPath)){\n    version = Files.readString(versionPath);\n    System.out.println(\"Using version from 'version.txt': \" + version);\n}else{\n    version = \"1.0.0\";\n    System.out.println(\"Using hard coded version: \" + version);\n}\n\nString filePath = \"pom.xml\";\ntry {\n    String pom = Files.readString(Path.of(filePath));\n    String searchString = \"<dependencies>\";\n    Pattern pattern = Pattern.compile(searchString);\n    Matcher matcher = pattern.matcher(pom);\n\n    if (matcher.find()) {\n        System.out.println(\"String found at position: \" + matcher.start());\n    } else {\n        System.out.println(\"String not found\");\n    }\n\n    String newFacet = \"\\n\\n         <dependency>\\n          <groupId>com.sap.cds</groupId>\\n           <artifactId>cds-feature-attachments</artifactId>\\n          <version>\" + version + \"</version>\\n        </dependency>\\n\\n\";\n    int insertPos = matcher.end();\n    pom = pom.substring(0, insertPos) + newFacet + pom.substring(insertPos);\n\n    Files.writeString(Path.of(filePath), pom);\n\n} catch (IOException e) {\n    e.printStackTrace();\n}",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "shell",
        "value": "mvn clean compile",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "shell",
        "value": "cd ..",
        "outputs": []
    },
    {
        "kind": 1,
        "language": "markdown",
        "value": "## Enhance Service\n\nMake the static UI resources available and add attachments facet",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "shell",
        "value": "%%writefile \"srv/src/main/resources/application.properties\"\nspring.web.resources.static-locations=file:../app\nspring.jmx.enabled=true",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "java",
        "value": "String filePath = \"app/admin-books/fiori-service.cds\";\n\ntry {\n    String cds = Files.readString(Path.of(filePath));\n    String searchString = \"Target:\\\\s*'@UI\\\\.FieldGroup#Details'\\\\s*},\";\n    Pattern pattern = Pattern.compile(searchString);\n    Matcher matcher = pattern.matcher(cds);\n\n    if (matcher.find()) {\n        System.out.println(\"String found at position: \" + matcher.start());\n    } else {\n        System.out.println(\"String not found\");\n    }\n\n    String newFacet = \"\\n    {\\n      $Type : 'UI.ReferenceFacet',\\n      ID     : 'AttachmentsFacet',\\n      Label : '{i18n>attachments}',\\n      Target: 'attachments/@UI.LineItem'\\n    },\";\n    int insertPos = matcher.end();\n    cds = cds.substring(0, insertPos) + newFacet + cds.substring(insertPos);\n\n    Files.writeString(Path.of(filePath), cds);\n\n} catch (IOException e) {\n    e.printStackTrace();\n}",
        "outputs": []
    }
]