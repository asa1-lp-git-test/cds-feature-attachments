package com.sap.cds.feature.attachments.service.malware.client.httpclient;

import java.net.URI;
import java.util.Objects;

import com.sap.cds.feature.attachments.service.malware.constants.MalwareScanConstants;
import com.sap.cds.integration.cloudsdk.destination.HttpClientProvider;
import com.sap.cds.services.environment.CdsProperties.ConnectionPool;
import com.sap.cds.services.runtime.CdsRuntime;
import com.sap.cloud.environment.servicebinding.api.ServiceBinding;
import com.sap.cloud.sdk.cloudplatform.connectivity.DefaultHttpDestination;
import com.sap.cloud.sdk.cloudplatform.security.BasicCredentials;

/**
	* Factory for creating a {@link HttpClientProvider} for the malware scan service.
	*/
//TODO unit tests
public class MalwareScanClientProviderFactory implements HttpClientProviderFactory {

	private static final String VALUE_URI = "url";
	private static final String VALUE_USERNAME = "username";
	private static final String VALUE_PASSWORD = "password";

	private final HttpClientProvider clientProvider;
	private final boolean serviceBound;

	public MalwareScanClientProviderFactory(ServiceBinding binding, CdsRuntime runtime, ConnectionPool connectionPoolConfig) {
		if (Objects.isNull(binding)) {
			serviceBound = false;
			clientProvider = null;
		} else {
			var credentials = binding.getCredentials();
			var url = (String) credentials.get(VALUE_URI);
			var serviceUrl = URI.create(url).normalize();
			var basic = new BasicCredentials((String) credentials.get(VALUE_USERNAME), (String) credentials.get(VALUE_PASSWORD));
			var destination = DefaultHttpDestination.builder(serviceUrl).name(MalwareScanConstants.MALWARE_SCAN_SERVICE_LABEL)
																							.basicCredentials(basic).build();
			clientProvider = new HttpClientProvider(destination, connectionPoolConfig, runtime);
			serviceBound = true;
		}
	}

	@Override
	public HttpClientProvider getHttpClientProvider() {
		return clientProvider;
	}

	@Override
	public boolean isServiceBound() {
		return serviceBound;
	}
}
