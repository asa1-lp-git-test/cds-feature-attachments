package com.sap.cds.feature.attachments.service.handler.transaction;

import java.util.Objects;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.sap.cds.feature.attachments.service.malware.AsyncMalwareScanExecutor;
import com.sap.cds.feature.attachments.service.malware.AttachmentMalwareScanner;
import com.sap.cds.reflect.CdsEntity;
import com.sap.cds.services.changeset.ChangeSetListener;

public record EndTransactionMalwareScanRunner(CdsEntity attachmentEntity, String documentId,
																																														AttachmentMalwareScanner attachmentMalwareScanner) implements ChangeSetListener, AsyncMalwareScanExecutor {

	private static final Logger logger = LoggerFactory.getLogger(EndTransactionMalwareScanRunner.class);

	@Override
	public void afterClose(boolean completed) {
		if (completed) {
			startScanning(attachmentEntity, documentId);
		}
	}

	@Override
	public void scanAsync(CdsEntity attachmentEntity, String documentId) {
		//TODO Unit Tests
		startScanning(attachmentEntity, documentId);
	}

	private void startScanning(CdsEntity attachmentEntityToScan, String documentId) {
		logger.debug("Transaction completed. Starting to scan attachment asynchronously.");
		Supplier<Void> executeAdapterSupplier = () -> {
			logger.info("Starting to scan attachment");
			attachmentMalwareScanner.scanAttachment(attachmentEntityToScan, documentId);
			return null;
		};
		CompletableFuture.supplyAsync(executeAdapterSupplier).whenComplete((result, exception) -> {
			if (Objects.nonNull(exception)) {
				logger.error("Error during scanning attachment", exception);
			} else {
				logger.info("Scanning attachment completed.");
			}
		});
	}

}
