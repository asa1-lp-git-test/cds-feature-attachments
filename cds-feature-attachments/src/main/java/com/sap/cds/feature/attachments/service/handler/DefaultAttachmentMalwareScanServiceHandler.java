package com.sap.cds.feature.attachments.service.handler;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.sap.cds.CdsData;
import com.sap.cds.feature.attachments.generated.cds4j.com.sap.attachments.Attachments;
import com.sap.cds.feature.attachments.generated.cds4j.com.sap.attachments.StatusCode;
import com.sap.cds.feature.attachments.service.AttachmentMalwareScanService;
import com.sap.cds.feature.attachments.service.AttachmentService;
import com.sap.cds.feature.attachments.service.client.MalwareScanClient;
import com.sap.cds.feature.attachments.service.client.model.MalwareScanResultStatus;
import com.sap.cds.feature.attachments.service.handler.constants.HandlerConstants;
import com.sap.cds.feature.attachments.service.model.servicehandler.MalwareScanEventContext;
import com.sap.cds.ql.Select;
import com.sap.cds.ql.Update;
import com.sap.cds.services.handler.annotations.HandlerOrder;
import com.sap.cds.services.handler.annotations.On;
import com.sap.cds.services.handler.annotations.ServiceName;
import com.sap.cds.services.persistence.PersistenceService;

/**
	* Default Handler of the {@link AttachmentMalwareScanService} service.
	* The given input stream is scanned by using the malware scan service.
	* The result of the scan	is returned with status {@link MalwareScanResultStatus}.
	*/
//TODO Unit Tests
@ServiceName(value = "*", type = AttachmentMalwareScanService.class)
public class DefaultAttachmentMalwareScanServiceHandler {

	private static final Logger logger = LoggerFactory.getLogger(DefaultAttachmentMalwareScanServiceHandler.class);
	private final PersistenceService persistenceService;
	private final AttachmentService attachmentService;
	private final MalwareScanClient malwareScanClient;

	public DefaultAttachmentMalwareScanServiceHandler(PersistenceService persistenceService, AttachmentService attachmentService, MalwareScanClient malwareScanClient) {
		this.persistenceService = persistenceService;
		this.attachmentService = attachmentService;
		this.malwareScanClient = malwareScanClient;
	}

	@On(event = AttachmentMalwareScanService.EVENT_SCAN_DOCUMENT)
	@HandlerOrder(HandlerConstants.DEFAULT_ON)
	public void scanDocument(MalwareScanEventContext context) {
		logger.info("Service handler called to scan document for malware");
		context.setCompleted();

		var select = Select.from(context.getAttachmentEntityName()).columns(Attachments.DOCUMENT_ID)
																	.matching(context.getAttachmentKeys());
		var result = persistenceService.run(select);
		if (result.inlineCount() == 0) {
			//nothing to do
			return;
		}
		if (result.inlineCount() > 1) {
			throw new IllegalStateException("More than one attachment found for the given keys");
		}

		var data = result.single(CdsData.class);
		var documentId = (String) data.get(Attachments.DOCUMENT_ID);
		var content = attachmentService.readAttachment(documentId);
		var status = malwareScanClient.scanDocument(content);

		var updateData = CdsData.create();
		updateData.put(Attachments.STATUS_CODE, mapStatus(status));
		var update = Update.entity(context.getAttachmentEntityName()).data(data).matching(context.getAttachmentKeys());
		persistenceService.run(update);
	}

	private String mapStatus(MalwareScanResultStatus status) {
		return switch (status) {
			case CLEAN -> StatusCode.CLEAN;
			case INFECTED, ENCRYPTED -> StatusCode.INFECTED;
			default -> StatusCode.NO_SCANNER;
		};
	}

}
