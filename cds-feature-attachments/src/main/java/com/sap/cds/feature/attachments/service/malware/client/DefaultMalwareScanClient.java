package com.sap.cds.feature.attachments.service.malware.client;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.util.Objects;

import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
import org.apache.http.entity.InputStreamEntity;
import org.apache.http.util.EntityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.Marker;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.sap.cds.feature.attachments.service.malware.client.model.MalwareScanResult;
import com.sap.cds.feature.attachments.service.malware.client.model.MalwareScanResultStatus;
import com.sap.cds.feature.attachments.utilities.LoggingMarker;
import com.sap.cds.integration.cloudsdk.destination.HttpClientProvider;
import com.sap.cds.integration.cloudsdk.rest.client.JsonRestClientResponseException;
import com.sap.cds.services.ServiceException;
import com.sap.cds.services.environment.CdsProperties.ConnectionPool;
import com.sap.cds.services.runtime.CdsRuntime;
import com.sap.cloud.environment.servicebinding.api.ServiceBinding;
import com.sap.cloud.sdk.cloudplatform.connectivity.DefaultHttpDestination;
import com.sap.cloud.sdk.cloudplatform.security.BasicCredentials;

//TODO add logger
//TODO add java doc
//TODO refactor
//TODO Unit Tests
/**
	* Default implementation of the {@link MalwareScanClient} interface.
	* The given input stream is scanned by using the malware scan service.
	* The result of the scan	is returned with status {@link MalwareScanResultStatus}.
	*/
public class DefaultMalwareScanClient implements MalwareScanClient {

	public static final String NAME_MALWARE_SCANNER = "malware-scanner";
	private static final String JSON_CONTENT = "application/json";

	private static final String VALUE_URI = "url";
	private static final String VALUE_USERNAME = "username";
	private static final String VALUE_PASSWORD = "password";

	private static final Logger logger = LoggerFactory.getLogger(DefaultMalwareScanClient.class);
	private static final Marker marker = LoggingMarker.MALWARE_SCANNER.getMarker();

	private final ObjectMapper mapper = new ObjectMapper();
	private final HttpClientProvider clientProvider;
	private final boolean serviceBound;

	public DefaultMalwareScanClient(ServiceBinding binding, CdsRuntime runtime, ConnectionPool connectionPoolConfig) {
		if (Objects.isNull(binding)) {
			serviceBound = false;
			clientProvider = null;
		} else {
			var credentials = binding.getCredentials();
			var url = (String) credentials.get(VALUE_URI);
			var serviceUrl = URI.create(url).normalize();
			var basic = new BasicCredentials((String) credentials.get(VALUE_USERNAME), (String) credentials.get(VALUE_PASSWORD));
			var destination = DefaultHttpDestination.builder(serviceUrl).name(NAME_MALWARE_SCANNER).basicCredentials(basic)
																							.build();
			clientProvider = new HttpClientProvider(destination, connectionPoolConfig, runtime);
			serviceBound = true;
		}
	}

	@Override
	public MalwareScanResultStatus scanDocument(InputStream document) {
		if (!serviceBound) {
			logger.info(marker, "No malware scanner service bound");
			return MalwareScanResultStatus.NO_SCANNER;
		} else {
			logger.info(marker, "Start scanning document");
			return scanDocumentWithClient(document);
		}
	}

	private MalwareScanResultStatus scanDocumentWithClient(InputStream document) {
		var httpClient = clientProvider.get();
		InputStreamEntity reqEntity = new InputStreamEntity(document, -1);
		reqEntity.setContentType("binary/octet-stream");
		reqEntity.setChunked(true);

		var request = new HttpEntityEnclosingRequestBase() {
			@Override
			public String getMethod() {
				return "POST";
			}
		};
		request.setEntity(reqEntity);
		try (var response = (CloseableHttpResponse) httpClient.execute(request)) {
			var responseJson = handleJsonResponse(response);
			if (responseJson.isMalwareDetected() || responseJson.isEncryptedContentDetected()) {
				return MalwareScanResultStatus.INFECTED;
			} else {
				return MalwareScanResultStatus.CLEAN;
			}
		} catch (IOException e) {
			throw new ServiceException(e);
		}
	}

	private MalwareScanResult handleJsonResponse(CloseableHttpResponse response) throws IOException {
		try (CloseableHttpResponse resp = response) {
			int code = resp.getStatusLine().getStatusCode();

			logger.debug("Responded with status code '{}'", code);

			if (code >= 200 && code <= 207) {
				String contentType = JSON_CONTENT;
				if (resp.getEntity() != null) {
					if (resp.getEntity().getContentType() != null) {
						contentType = resp.getEntity().getContentType().getValue();
					}
					if (contentType.contains(JSON_CONTENT)) {
						String jsonData = EntityUtils.toString(resp.getEntity());
						return mapper.readValue(jsonData, MalwareScanResult.class);
					} else {
						throw new IOException("Unexpected response format: Expected JSON but found '" + contentType + "'");
					}
				} else {
					return mapper.readValue("{}", MalwareScanResult.class);
				}
			} else {
				String reason = resp.getStatusLine().getReasonPhrase();
				throw new JsonRestClientResponseException(code, "Unexpected request HTTP response (" + code + ") " + reason);
			}
		}
	}

}
