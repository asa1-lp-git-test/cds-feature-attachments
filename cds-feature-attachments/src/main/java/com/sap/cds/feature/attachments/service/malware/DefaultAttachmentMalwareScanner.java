package com.sap.cds.feature.attachments.service.malware;

import java.io.InputStream;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.sap.cds.CdsData;
import com.sap.cds.Result;
import com.sap.cds.feature.attachments.generated.cds4j.com.sap.attachments.Attachments;
import com.sap.cds.feature.attachments.generated.cds4j.com.sap.attachments.StatusCode;
import com.sap.cds.feature.attachments.handler.draftservice.constants.DraftConstants;
import com.sap.cds.feature.attachments.service.AttachmentService;
import com.sap.cds.feature.attachments.service.malware.client.MalwareScanClient;
import com.sap.cds.feature.attachments.service.malware.client.model.MalwareScanResultStatus;
import com.sap.cds.ql.Select;
import com.sap.cds.ql.Update;
import com.sap.cds.reflect.CdsElementNotFoundException;
import com.sap.cds.reflect.CdsEntity;
import com.sap.cds.services.persistence.PersistenceService;

/**
	* The given input stream is scanned by using the malware scan service.
	* The result of the scan	is returned with status {@link MalwareScanResultStatus}.
	* In case of draft entity the data are tried to read from the draft entity first and if nothing is found
	* the data are read from the main entity.
	*/
public class DefaultAttachmentMalwareScanner implements AttachmentMalwareScanner {

	private static final Logger logger = LoggerFactory.getLogger(DefaultAttachmentMalwareScanner.class);
	private final PersistenceService persistenceService;
	private final AttachmentService attachmentService;
	private final MalwareScanClient malwareScanClient;

	public DefaultAttachmentMalwareScanner(PersistenceService persistenceService, AttachmentService attachmentService,
																																								MalwareScanClient malwareScanClient) {
		this.persistenceService = persistenceService;
		this.attachmentService = attachmentService;
		this.malwareScanClient = malwareScanClient;
	}

	@Override
	public void scanAttachment(CdsEntity attachmentEntity, String documentId) {
		logger.info("Service handler called to scan document for malware");

		var selectionResult = selectData(attachmentEntity, documentId);

		selectionResult.forEach(result -> {

			var rowCount = result.result().rowCount();
			if (rowCount <= 0) {
				logger.info("No data found, nothing to scan for entity: {}", result.entity.getQualifiedName());
				return;
			}

			if (rowCount > 1) {
				logger.warn("More than one attachment found for document id: {} in entity: {}", documentId,
																result.entity.getQualifiedName());
				throw new IllegalStateException("More than one attachment found for document id: " + documentId);
			}

			var cdsData = result.result().single(CdsData.class);
			var status = scanDocument(cdsData);
			updateData(result.entity, documentId, status);
		});

	}

	private List<SelectionResult> selectData(CdsEntity attachmentEntity, String documentId) {
		var result = new ArrayList<SelectionResult>();
		try {
			var entity = (CdsEntity) attachmentEntity.getTargetOf(DraftConstants.SIBLING_ENTITY);
			var selectionResult = readData(documentId, entity);
			result.add(new SelectionResult(entity, selectionResult));
		} catch (CdsElementNotFoundException ignored) {
			//no sibling found nothing to select
		}
		var selectionResult = readData(documentId, attachmentEntity);
		result.add(new SelectionResult(attachmentEntity, selectionResult));

		return result;
	}

	private Result readData(String documentId, CdsEntity entity) {
		var select = Select.from(entity).columns(Attachments.DOCUMENT_ID, Attachments.CONTENT).where(
				entry -> entry.get(Attachments.DOCUMENT_ID).eq(documentId));
		return persistenceService.run(select);
	}

	private MalwareScanResultStatus scanDocument(CdsData data) {
		var documentId = (String) data.get(Attachments.DOCUMENT_ID);
		InputStream dbContent = (InputStream) data.get(Attachments.CONTENT);
		var content = Objects.nonNull(dbContent) ? dbContent : attachmentService.readAttachment(documentId);
		return malwareScanClient.scanDocument(content);
	}

	private void updateData(CdsEntity attachmentEntity, String documentId, MalwareScanResultStatus status) {
		var updateData = CdsData.create();
		updateData.put(Attachments.STATUS_CODE, mapStatus(status));
		updateData.put(Attachments.SCANNED_AT, Instant.now());
		logger.debug("CdsData shall be updated for entity: {}", attachmentEntity.getQualifiedName());
		var update = Update.entity(attachmentEntity).data(updateData).where(
				entry -> entry.get(Attachments.DOCUMENT_ID).eq(documentId));
		var result = persistenceService.run(update);
		logger.info("Attachment has been updated, with result row count {} for entity {}", result.rowCount(),
														attachmentEntity.getQualifiedName());
	}

	private String mapStatus(MalwareScanResultStatus status) {
		return switch (status) {
			case CLEAN -> StatusCode.CLEAN;
			case INFECTED, ENCRYPTED -> StatusCode.INFECTED;
			default -> StatusCode.NO_SCANNER;
		};
	}

	private record SelectionResult(CdsEntity entity, Result result) {
	}

}
