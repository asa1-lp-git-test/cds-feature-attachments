package com.sap.cds.feature.attachments.service.malware;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

import java.util.Collections;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;

import com.sap.cds.CdsData;
import com.sap.cds.Result;
import com.sap.cds.feature.attachments.generated.test.cds4j.unit.test.Attachment_;
import com.sap.cds.feature.attachments.handler.helper.RuntimeHelper;
import com.sap.cds.feature.attachments.service.AttachmentService;
import com.sap.cds.feature.attachments.service.malware.client.MalwareScanClient;
import com.sap.cds.feature.attachments.service.malware.client.model.MalwareScanResultStatus;
import com.sap.cds.ql.cqn.CqnSelect;
import com.sap.cds.services.persistence.PersistenceService;
import com.sap.cds.services.runtime.CdsRuntime;

class DefaultAttachmentMalwareScannerTest {

	private static CdsRuntime runtime;

	private DefaultAttachmentMalwareScanner cut;
	private PersistenceService persistenceService;
	private AttachmentService attachmentService;
	private MalwareScanClient malwareScanClient;
	private Result result;
	private ArgumentCaptor<CqnSelect> selectCaptor;

	@BeforeAll
	static void classSetup() {
		runtime = RuntimeHelper.runtime;
	}

	@BeforeEach
	void setup() {
		persistenceService = mock(PersistenceService.class);
		attachmentService = mock(AttachmentService.class);
		malwareScanClient = mock(MalwareScanClient.class);
		cut = new DefaultAttachmentMalwareScanner(persistenceService, attachmentService, malwareScanClient);

		result = mock(Result.class);
		selectCaptor = ArgumentCaptor.forClass(CqnSelect.class);
	}

	@Test
	void correctSelectForNonDraftEntity() {
		var entity = runtime.getCdsModel().findEntity(Attachment_.CDS_NAME);
		when(persistenceService.run(any(CqnSelect.class))).thenReturn(result);

		cut.scanAttachment(entity.orElseThrow(), Collections.emptyMap());

		verify(persistenceService).run(selectCaptor.capture());
		var select = selectCaptor.getValue();
		assertThat(select.from().toString()).contains(entity.get().getQualifiedName());
	}

	@Test
	void correctSelectForDraftEntity() {
		var entity = runtime.getCdsModel().findEntity(getTestServiceAttachmentName());
		when(persistenceService.run(any(CqnSelect.class))).thenReturn(result);
		when(result.rowCount()).thenReturn(1L);
		when(result.single(CdsData.class)).thenReturn(CdsData.create());
		when(malwareScanClient.scanDocument(any())).thenReturn(MalwareScanResultStatus.CLEAN);

		cut.scanAttachment(entity.orElseThrow(), Collections.emptyMap());

		verify(persistenceService).run(selectCaptor.capture());
		var select = selectCaptor.getValue();
		assertThat(select.from().toString()).contains(entity.get().getQualifiedName());
	}

	private String getTestServiceAttachmentName() {
		return com.sap.cds.feature.attachments.generated.test.cds4j.unit.test.testservice.Attachment_.CDS_NAME;
	}

}