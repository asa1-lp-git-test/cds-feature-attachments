package com.sap.cds.feature.attachments.service.malware;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

import java.io.InputStream;
import java.util.Collections;
import java.util.Map;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.EnumSource;
import org.mockito.ArgumentCaptor;

import com.sap.cds.CdsData;
import com.sap.cds.Result;
import com.sap.cds.feature.attachments.generated.cds4j.com.sap.attachments.StatusCode;
import com.sap.cds.feature.attachments.generated.test.cds4j.unit.test.Attachment_;
import com.sap.cds.feature.attachments.handler.helper.RuntimeHelper;
import com.sap.cds.feature.attachments.service.AttachmentService;
import com.sap.cds.feature.attachments.service.malware.client.MalwareScanClient;
import com.sap.cds.feature.attachments.service.malware.client.model.MalwareScanResultStatus;
import com.sap.cds.ql.cqn.CqnSelect;
import com.sap.cds.ql.cqn.CqnUpdate;
import com.sap.cds.services.persistence.PersistenceService;
import com.sap.cds.services.runtime.CdsRuntime;

class DefaultAttachmentMalwareScannerTest {

	private static CdsRuntime runtime;

	private DefaultAttachmentMalwareScanner cut;
	private PersistenceService persistenceService;
	private AttachmentService attachmentService;
	private MalwareScanClient malwareScanClient;
	private Result result;
	private ArgumentCaptor<CqnSelect> selectCaptor;
	private ArgumentCaptor<CqnUpdate> updateCaptor;

	@BeforeAll
	static void classSetup() {
		runtime = RuntimeHelper.runtime;
	}

	@BeforeEach
	void setup() {
		persistenceService = mock(PersistenceService.class);
		attachmentService = mock(AttachmentService.class);
		malwareScanClient = mock(MalwareScanClient.class);
		cut = new DefaultAttachmentMalwareScanner(persistenceService, attachmentService, malwareScanClient);

		result = mock(Result.class);
		selectCaptor = ArgumentCaptor.forClass(CqnSelect.class);
		updateCaptor = ArgumentCaptor.forClass(CqnUpdate.class);
	}

	@Test
	void correctSelectForNonDraftEntity() {
		var entity = runtime.getCdsModel().findEntity(Attachment_.CDS_NAME);
		when(persistenceService.run(any(CqnSelect.class))).thenReturn(result);

		var keys = createDefaultKeys();
		cut.scanAttachment(entity.orElseThrow(), keys);

		verify(persistenceService).run(selectCaptor.capture());
		var select = selectCaptor.getValue();
		assertThat(select.from().toString()).contains(entity.get().getQualifiedName());
		verifyKeyWhereCondition(select);
	}

	@Test
	void correctSelectForDraftEntity() {
		var entity = runtime.getCdsModel().findEntity(getTestServiceAttachmentName());
		mockSelectResult(CdsData.create(), MalwareScanResultStatus.CLEAN);

		var keys = createDefaultKeys();
		cut.scanAttachment(entity.orElseThrow(), keys);

		verify(persistenceService).run(selectCaptor.capture());
		var select = selectCaptor.getValue();
		assertThat(select.from().toString()).contains(entity.get().getQualifiedName());
		verifyKeyWhereCondition(select);
	}

	@Test
	void fallbackToActiveEntityIfDraftHasNoData() {
		var entity = runtime.getCdsModel().findEntity(getTestServiceAttachmentName());
		var emptyResult = mock(Result.class);
		when(emptyResult.rowCount()).thenReturn(0L);
		when(persistenceService.run(any(CqnSelect.class))).thenReturn(emptyResult).thenReturn(result);
		when(result.rowCount()).thenReturn(1L);
		when(result.single(CdsData.class)).thenReturn(CdsData.create());
		when(malwareScanClient.scanDocument(any())).thenReturn(MalwareScanResultStatus.CLEAN);

		var keys = createDefaultKeys();
		cut.scanAttachment(entity.orElseThrow(), keys);

		verify(persistenceService, times(2)).run(selectCaptor.capture());
		var selects = selectCaptor.getAllValues();
		assertThat(selects).hasSize(2);
		assertThat(selects.get(0).from().toString()).contains(entity.get().getQualifiedName() + "_drafts");
		verifyKeyWhereCondition(selects.get(0));
		assertThat(selects.get(1).from().toString()).contains(entity.get().getQualifiedName());
		verifyKeyWhereCondition(selects.get(1));
	}

	@Test
	void exceptionIfTooManyResultsAreSelected() {
		var entity = runtime.getCdsModel().findEntity(Attachment_.CDS_NAME).orElseThrow();
		when(persistenceService.run(any(CqnSelect.class))).thenReturn(result);
		when(result.inlineCount()).thenReturn(2L);

		Map<String, Object> emptyKeys = Collections.emptyMap();
		assertThrows(IllegalStateException.class, () -> cut.scanAttachment(entity, emptyKeys));
	}

	@ParameterizedTest
	@EnumSource(MalwareScanResultStatus.class)
	void dataAreUpdatedWithCleanStatus(MalwareScanResultStatus status) {
		var entity = runtime.getCdsModel().findEntity(getTestServiceAttachmentName());
		mockSelectResult(CdsData.create(), status);

		var keys = createDefaultKeys();
		cut.scanAttachment(entity.orElseThrow(), keys);

		verify(persistenceService).run(updateCaptor.capture());
		var update = updateCaptor.getValue();
		assertThat(update.entries()).containsOnly(Map.of("status_code", getDataBaseString(status)));
	}

	@Test
	void contentTakenFromTheDatabaseSelect() {
		var entity = runtime.getCdsModel().findEntity(getTestServiceAttachmentName());
		var content = mock(InputStream.class);
		var data = CdsData.create();
		data.put("content", content);
		mockSelectResult(data, MalwareScanResultStatus.CLEAN);

		cut.scanAttachment(entity.orElseThrow(), Collections.emptyMap());

		verify(malwareScanClient).scanDocument(content);
		verifyNoInteractions(attachmentService);
	}

	@Test
	void contentTakenFromTheAttachmentService() {
		var entity = runtime.getCdsModel().findEntity(getTestServiceAttachmentName());
		var documentId = "documentId";
		var data = CdsData.create();
		data.put("documentId", documentId);
		mockSelectResult(data, MalwareScanResultStatus.CLEAN);
		var content = mock(InputStream.class);
		when(attachmentService.readAttachment(documentId)).thenReturn(content);

		cut.scanAttachment(entity.orElseThrow(), Collections.emptyMap());

		verify(attachmentService).readAttachment(documentId);
		verify(malwareScanClient).scanDocument(content);
	}

	private String getDataBaseString(MalwareScanResultStatus status) {
		return switch (status) {
			case CLEAN -> StatusCode.CLEAN;
			case INFECTED, ENCRYPTED -> StatusCode.INFECTED;
			default -> StatusCode.NO_SCANNER;
		};
	}

	private String getTestServiceAttachmentName() {
		return com.sap.cds.feature.attachments.generated.test.cds4j.unit.test.testservice.Attachment_.CDS_NAME;
	}

	private void mockSelectResult(CdsData cdsData, MalwareScanResultStatus status) {
		when(persistenceService.run(any(CqnSelect.class))).thenReturn(result);
		when(result.rowCount()).thenReturn(1L);
		when(result.single(CdsData.class)).thenReturn(cdsData);
		when(malwareScanClient.scanDocument(any())).thenReturn(status);
	}

	private Map<String, Object> createDefaultKeys() {
		return Map.of("key1", "value1", "key2", "value2");
	}

	private void verifyKeyWhereCondition(CqnSelect select) {
		assertThat(select.where()).isPresent();
		var selectWhere = select.where().get();
		assertThat(selectWhere.toString()).contains("{\"ref\":[\"key1\"]},\"=\",{\"val\":\"value1\"}");
		assertThat(selectWhere.toString()).contains("{\"ref\":[\"key2\"]},\"=\",{\"val\":\"value2\"}");
	}

}
