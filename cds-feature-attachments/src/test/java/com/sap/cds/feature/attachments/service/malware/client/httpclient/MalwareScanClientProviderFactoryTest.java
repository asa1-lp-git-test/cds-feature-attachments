package com.sap.cds.feature.attachments.service.malware.client.httpclient;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.sap.cds.services.environment.CdsProperties;
import com.sap.cds.services.environment.CdsProperties.ConnectionPool;
import com.sap.cds.services.request.UserInfo;
import com.sap.cds.services.runtime.CdsRuntime;
import com.sap.cloud.environment.servicebinding.api.ServiceBinding;

class MalwareScanClientProviderFactoryTest {
	private MalwareScanClientProviderFactory cut;
	private ServiceBinding binding;
	private CdsRuntime runtime;
	private ConnectionPool connectionPoolConfig;

	@BeforeEach
	void setup() {
		binding = mock(ServiceBinding.class);
		runtime = mock(CdsRuntime.class);
		connectionPoolConfig = mock(ConnectionPool.class);
	}

	@Test
	void serviceNotBound() {
		cut = new MalwareScanClientProviderFactory(null, runtime, connectionPoolConfig);

		assertThat(cut.isServiceBound()).isFalse();
		assertThat(cut.getHttpClientProvider()).isNull();
	}

	@Test
	void serviceBound() {
		mockInput();

		cut = new MalwareScanClientProviderFactory(binding, runtime, connectionPoolConfig);

		assertThat(cut.isServiceBound()).isTrue();
	}

	@Test
	void clientProviderReturned() {
		mockInput();
		var userInfo = mock(UserInfo.class);
		when(runtime.getProvidedUserInfo()).thenReturn(userInfo);
		when(connectionPoolConfig.getMaxConnections()).thenReturn(10);
		when(connectionPoolConfig.getMaxConnectionsPerRoute()).thenReturn(1);

		cut = new MalwareScanClientProviderFactory(binding, runtime, connectionPoolConfig);

		var clientProvider = cut.getHttpClientProvider();
		assertThat(clientProvider).isNotNull();
		var client = clientProvider.get();
		assertThat(client).isNotNull();
	}

	private void mockInput() {
		Map<String, Object> credentials = Map.of("username", "name", "password", "pass", "url", "http://localhost:8080");
		when(binding.getCredentials()).thenReturn(credentials);
		var enabled = mock(CdsProperties.Enabled.class);
		when(connectionPoolConfig.getCombinePools()).thenReturn(enabled);
	}

}
