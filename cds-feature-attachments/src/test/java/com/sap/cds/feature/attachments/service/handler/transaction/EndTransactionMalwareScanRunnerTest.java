package com.sap.cds.feature.attachments.service.handler.transaction;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;

import org.awaitility.Awaitility;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.sap.cds.feature.attachments.service.malware.AttachmentMalwareScanner;
import com.sap.cds.reflect.CdsEntity;

class EndTransactionMalwareScanRunnerTest {

	private EndTransactionMalwareScanRunner cut;
	private CdsEntity attachmentEntity;
	private Map<String, Object> attachmentIds;
	private AttachmentMalwareScanner attachmentMalwareScanner;

	@BeforeEach
	void setup() {
		attachmentEntity = mock(CdsEntity.class);
		attachmentIds = Map.of("key", "value");
		attachmentMalwareScanner = mock(AttachmentMalwareScanner.class);
		cut = new EndTransactionMalwareScanRunner(attachmentEntity, attachmentIds, attachmentMalwareScanner);
	}

	@Test
	void notCompletedTransactionDoNothing() {
		cut.afterClose(false);

		verifyNoInteractions(attachmentMalwareScanner);
	}

	@Test
	void completedTransactionScanAttachments() {
		var executionDone = new AtomicBoolean();
		var usedThread = new AtomicReference<String>();
		doAnswer((invocation) -> {
			executionDone.set(true);
			usedThread.set(Thread.currentThread().getName());
			return null;
		}).when(attachmentMalwareScanner).scanAttachment(attachmentEntity, attachmentIds);

		cut.afterClose(true);

		Awaitility.await().until(executionDone::get);
		verify(attachmentMalwareScanner).scanAttachment(attachmentEntity, attachmentIds);
		assertThat(usedThread.get()).isNotEmpty().isNotEqualTo(Thread.currentThread().getName());
	}

}