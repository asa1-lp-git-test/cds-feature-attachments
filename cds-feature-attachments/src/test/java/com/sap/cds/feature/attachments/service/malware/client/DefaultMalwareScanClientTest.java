package com.sap.cds.feature.attachments.service.malware.client;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

import org.apache.http.HttpEntity;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;

import com.sap.cds.feature.attachments.service.malware.client.httpclient.HttpClientProviderFactory;
import com.sap.cds.feature.attachments.service.malware.client.model.MalwareScanResultStatus;
import com.sap.cds.integration.cloudsdk.destination.HttpClientProvider;

class DefaultMalwareScanClientTest {

	private DefaultMalwareScanClient cut;
	private HttpClientProviderFactory clientProviderFactory;
	private ArgumentCaptor<HttpEntityEnclosingRequestBase> requestCaptor;

	@BeforeEach
	void setup() {
		clientProviderFactory = mock(HttpClientProviderFactory.class);
		cut = new DefaultMalwareScanClient(clientProviderFactory);

		requestCaptor = ArgumentCaptor.forClass(HttpEntityEnclosingRequestBase.class);
	}

	@Test
	void noServiceBoundReturnsCorrectStatus() {
		when(clientProviderFactory.isServiceBound()).thenReturn(false);

		var result = cut.scanDocument(mock(InputStream.class));

		assertThat(result).isEqualTo(MalwareScanResultStatus.NO_SCANNER);
		verify(clientProviderFactory, never()).getHttpClientProvider();
	}

	@Test
	void contentIsUsedInRequest() throws IOException {
		var document = mock(InputStream.class);
		var httpClient = mockHttpResponse(200, false, false);

		cut.scanDocument(document);

		verify(httpClient).execute(requestCaptor.capture());
		assertThat(requestCaptor.getValue().getEntity().getContent()).isEqualTo(document);
	}

	private HttpClient mockHttpResponse(int httpStatus, boolean malwareDetected, boolean encryptedContentDetected) throws IOException {
		when(clientProviderFactory.isServiceBound()).thenReturn(true);
		var httpClient = mock(HttpClient.class);
		var httpClientProvider = mock(HttpClientProvider.class);
		when(httpClientProvider.get()).thenReturn(httpClient);
		when(clientProviderFactory.getHttpClientProvider()).thenReturn(httpClientProvider);
		var response = mock(CloseableHttpResponse.class);
		when(httpClient.execute(any())).thenReturn(response);
		var statusLine = mock(StatusLine.class);
		when(response.getStatusLine()).thenReturn(statusLine);
		when(statusLine.getStatusCode()).thenReturn(httpStatus);
		var entity = mock(HttpEntity.class);
		when(response.getEntity()).thenReturn(entity);
		when(entity.getContent()).thenReturn(new ByteArrayInputStream(getJsonResponse(malwareDetected, encryptedContentDetected).getBytes(StandardCharsets.UTF_8)));
		return httpClient;
	}

	private String getJsonResponse(boolean malwareDetected, boolean encryptedContentDetected) {
		return """
				{
						"malwareDetected": %s,
						"encryptedContentDetected": %s,
						"scanSize": 0,
						"mimeType": ""
				}""".formatted(malwareDetected, encryptedContentDetected);
	}

}
