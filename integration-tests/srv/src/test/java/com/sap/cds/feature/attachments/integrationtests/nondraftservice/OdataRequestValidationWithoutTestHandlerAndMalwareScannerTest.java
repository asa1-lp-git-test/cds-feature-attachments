package com.sap.cds.feature.attachments.integrationtests.nondraftservice;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import static org.assertj.core.api.Assertions.assertThat;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.ActiveProfiles;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.tomakehurst.wiremock.WireMockServer;
import com.maciejwalkowiak.wiremock.spring.ConfigureWireMock;
import com.maciejwalkowiak.wiremock.spring.EnableWireMock;
import com.maciejwalkowiak.wiremock.spring.InjectWireMock;
import com.sap.cds.feature.attachments.integrationtests.constants.Profiles;
import com.sap.cds.feature.attachments.service.malware.client.model.MalwareScanResult;

@ActiveProfiles(profiles = {Profiles.TEST_HANDLER_DISABLED, Profiles.MALWARE_SCAN_ENABLED})
@EnableWireMock({@ConfigureWireMock(port = 1111, name = "malware-scanner")})
class OdataRequestValidationWithoutTestHandlerAndMalwareScannerTest extends OdataRequestValidationWithoutTestHandlerAndWithoutMalwareScannerTest {

	@InjectWireMock("malware-scanner")
	private WireMockServer wiremock;

	@Autowired
	private ObjectMapper objectMapper;

	@BeforeEach
	void setup() throws JsonProcessingException {
		mockMalwareScanResult(false);
	}

	@Test
	void scannerReturnedMalwareContentCanNotBeRead() throws Exception {
		wiremock.resetRequests();
		mockMalwareScanResult(true);

		var serviceRoot = buildServiceRootWithDeepData();
		postServiceRoot(serviceRoot);

		var selectedRoot = selectStoredRootWithDeepData();
		var item = getItemWithAttachment(selectedRoot);
		var itemAttachment = getRandomItemAttachment(item);
		putContentForAttachmentWithNavigation(selectedRoot, itemAttachment);
		clearServiceHandlerContext();
		var selectedItemAfterChange = selectItem(item);
		var itemAttachmentAfterChange = getRandomItemAttachment(selectedItemAfterChange);

		var url = buildNavigationAttachmentUrl(selectedRoot.getId(), item.getId(), itemAttachment.getId()) + "/content";
		var response = requestHelper.executeGet(url);
		assertThat(response.getResponse().getStatus()).isEqualTo(HttpStatus.METHOD_NOT_ALLOWED.value());
		assertThat(response.getResponse().getContentAsString()).contains("Error text for not clean");
		verifySingleReadEvent(itemAttachmentAfterChange.getDocumentId());

		clearServiceHandlerContext();
		url = buildNavigationAttachmentUrl(selectedRoot.getId(), item.getId(), itemAttachment.getId());
		response = requestHelper.executeGet(url);
		assertThat(response.getResponse().getStatus()).isEqualTo(HttpStatus.OK.value());
		verifySingleReadEvent(itemAttachmentAfterChange.getDocumentId());
	}

	private void mockMalwareScanResult(boolean malware) throws JsonProcessingException {
		var result = new MalwareScanResult(malware, false, 1000, null);

		wiremock.stubFor(post(urlEqualTo("/")).withBasicAuth("test-user", "test-password")
																					.willReturn(aResponse().withBody(objectMapper.writeValueAsString(result)).withStatus(200)));
	}


}
